plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.15'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.dunple'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

ext {
	// 버전 관리용으로 상수로 뺌
	asciidocVersion = "2.0.7.RELEASE"
	// test 를 통해 생성되는 asciiDoc 경로 지정
	snippetsDir = file('build/generated-snippets')
}

dependencies {
	// SpringBoot
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.0'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.0'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.0'

	// RestDocs
	asciidoctorExt "org.springframework.restdocs:spring-restdocs-asciidoctor:${asciidocVersion}"
	testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:${asciidocVersion}"

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	implementation 'org.springframework.security:spring-security-crypto'
	implementation 'org.bouncycastle:bcprov-jdk15on:1.70'

	// QueryDsl
	implementation "com.querydsl:querydsl-core"
	implementation "com.querydsl:querydsl-jpa"
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
	annotationProcessor "jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// H2
	runtimeOnly 'com.h2database:h2'

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	outputs.dir snippetsDir
}

// 대충 테스트 진행하고 문서 생성한다는 뜻
asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
}

// 최종적으로 jar 파일 생성할때 asciidoc 도 같이 생성될 수 있게
bootJar {
	dependsOn asciidoctor

	copy{
		from asciidoctor.outputDir
		into 'src/main/resources/static/docs'
	}
}